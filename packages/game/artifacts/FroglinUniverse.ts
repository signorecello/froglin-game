
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractStorageLayout,
  ContractNotes,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  loadContractArtifact,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
} from '@aztec/aztec.js';
import FroglinUniverseContractArtifactJson from '../target/froglin_game-FroglinUniverse.json' assert { type: 'json' };
export const FroglinUniverseContractArtifact = loadContractArtifact(FroglinUniverseContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract FroglinUniverse;
 */
export class FroglinUniverseContract extends ContractBase {
  
  private constructor(
    instance: ContractInstanceWithAddress,
    wallet: Wallet,
  ) {
    super(instance, FroglinUniverseContractArtifact, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, FroglinUniverseContract.artifact, wallet) as Promise<FroglinUniverseContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, gm: AztecAddressLike) {
    return new DeployMethod<FroglinUniverseContract>(Point.ZERO, wallet, FroglinUniverseContractArtifact, FroglinUniverseContract.at, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, gm: AztecAddressLike) {
    return new DeployMethod<FroglinUniverseContract>(publicKey, wallet, FroglinUniverseContractArtifact, FroglinUniverseContract.at, Array.from(arguments).slice(2));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof FroglinUniverseContract['methods']>(
    opts: { publicKey?: PublicKey; method?: M; wallet: Wallet },
    ...args: Parameters<FroglinUniverseContract['methods'][M]>
  ) {
    return new DeployMethod<FroglinUniverseContract>(
      opts.publicKey ?? Point.ZERO,
      opts.wallet,
      FroglinUniverseContractArtifact,
      FroglinUniverseContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return FroglinUniverseContractArtifact;
  }
  

  
    public static get storage(): ContractStorageLayout<'game_master' | 'epoch' | 'fog' | 'players'> {
      return {
        game_master: {
          slot: new Fr(1n),
          typ: "SharedImmutable<AztecAddress>",
        }
      ,
epoch: {
          slot: new Fr(2n),
          typ: "PublicMutable<Epoch>",
        }
      ,
fog: {
          slot: new Fr(4n),
          typ: "PublicMutable<Field>",
        }
      ,
players: {
          slot: new Fr(5n),
          typ: "Map<AztecAddress, PrivateMutable<PlayerNote>>",
        }
      
      } as ContractStorageLayout<'game_master' | 'epoch' | 'fog' | 'players'>;
    }
    

  
  public static get notes(): ContractNotes<'PlayerNote'> {
    const notes = this.artifact.outputs.globals.notes ? (this.artifact.outputs.globals.notes as any) : [];
    return {
      PlayerNote: {
        id: new Fr(679711410078111116101n),
      }
    
    } as ContractNotes<'PlayerNote'>;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** advance_epoch() */
    advance_epoch: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** mana_boost(amount: field) */
    mana_boost: ((amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** view_player(owner: struct) */
    view_player: ((owner: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** view_game() */
    view_game: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** constructor(gm: struct) */
    constructor: ((gm: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** register(owner: struct, secret: field) */
    register: ((owner: AztecAddressLike, secret: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((contract_address: AztecAddressLike, nonce: FieldLike, storage_slot: FieldLike, note_type_id: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
